--[[
		cLinux BASH
	WIP
	TODO:
		Switch to session-based permission system (basically update the FS calls)
		Opening programs as processes
		Sandboxing programs
		Pipelining
		Customization
~Overflwn
]]

term.clear()
term.setCursorPos(1,1)
print("cLinux Kernel version: " .. tostring(_ver_clinux))

-- Create a new perm session, important for FS calls
local new_session = perm.createSession()
local result = new_session.logIn("root", "toor")
if result == perm.status.WRONG_PW then
	log.printAndLog(log.type.ERROR, "bash", "Wrong root password!")
	os.sleep(3)
elseif result == perm.status.USER_NOT_FOUND then
	log.printAndLog(log.type.ERROR, "bash", "root not found!")
	os.sleep(3)
else
	print("Logged in as: " .. new_session.getUser())
end

local currentDir = "/root"
if not fs.exists(currentDir) then
	fs.makeDir(currentDir, new_session)
end
local hostName = "noname"

if fs.exists("/etc/hostname") then
	local file, err = fs.open("/etc/hostname", "r", new_session)
	if not file then
		log.print(log.type.ERROR, "bash", "Couldn't open /etc/hostname: "..tostring(err))
	else
		local data = fs.readAll(file)
		hostName = data
		fs.close(file)
	end
end

function _G.changeDir(dest)
	currentDir = dest
end

function _G.getCurrentDir()
	return currentDir
end

while true do
	local isHome = false
	if string.find(currentDir, perm.getUserHomeDir(new_session.getUser())) == 1 then
		isHome = true
	end
	if not isHome then
		term.write("["..new_session.getUser().."@"..hostName.." "..currentDir.."]$ ")
	else
		local homedir = perm.getUserHomeDir(new_session.getUser())
		local final_dir = "~"..string.sub(currentDir, #homedir+1)
		term.write("["..new_session.getUser().."@"..hostName.." "..final_dir.."]$ ")
	end
	local text = read()
	local cmds = splitStr(text, "%s")
	local cmd = table.remove(cmds, 1)
	if cmd == "ls" then
		local files = fs.list(cmds[1] or currentDir)
		if not files then
			print("Path not found.")
		else
			for each, entry in ipairs(files) do
				print(entry)
			end
		end
	elseif cmd == "reboot" then
		os.reboot()
	elseif fs.exists("/bin/"..cmd) and not fs.isDir("/bin/"..cmd) then
		local func, err = loadfile("/bin/"..cmd)
		if not func then
			print("Failed to load program: "..tostring(err))
		else
			local ok, err = pcall(func, unpack(cmds))
			if not ok then
				print("Runtime error: "..tostring(err))
			end
		end
	else
		print("Command not found.")
	end
end
